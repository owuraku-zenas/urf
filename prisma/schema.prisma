generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Member {
  id          String       @id @default(cuid())
  name        String
  email       String?      @unique
  phone       String   @unique
  dateOfBirth DateTime?
  joinDate    DateTime     @default(now())
  university  String?
  program     String?
  startYear   String?
  hostel      String?
  roomNumber  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  cellGroupId String?
  invitedById String?
  attendances Attendance[]
  cellGroup   CellGroup?   @relation(fields: [cellGroupId], references: [id])
  invitedBy   Member?      @relation("MemberInvites", fields: [invitedById], references: [id])
  invitees    Member[]     @relation("MemberInvites")
}

model CellGroup {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  members     Member[]
}

model Event {
  id          String       @id @default(cuid())
  name        String
  type        EventType
  date        DateTime
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attendances Attendance[]
}

model Attendance {
  id        String   @id @default(uuid())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  member    Member   @relation(fields: [memberId], references: [id])
  memberId  String
  createdAt DateTime @default(now())

  @@unique([eventId, memberId])
}

enum Role {
  ADMIN
  USER
}

enum EventType {
  MIDWEEK
  SUNDAY
  PRAYER
  SPECIAL
}
